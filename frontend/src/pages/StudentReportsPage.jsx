import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { apiFetch } from '../utils/apiFetch';
import * as XLSX from 'xlsx';
import StudentDetailModal from '../components/StudentDetailModal';

const StudentReportsPage = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [reports, setReports] = useState([]);
  const [summary, setSummary] = useState(null);
  const [generatedInfo, setGeneratedInfo] = useState(null);
  
  // Filters
  const [classId, setClassId] = useState('');
  const [facultyId, setFacultyId] = useState('');
  const [fromDate, setFromDate] = useState('');
  const [toDate, setToDate] = useState('');
  
  // Available options for filters
  const [classes, setClasses] = useState([]);
  const [faculties, setFaculties] = useState([]);
  
  // Table state
  const [sortBy, setSortBy] = useState('attendancePercentage');
  const [sortOrder, setSortOrder] = useState('desc');
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  
  // Modal state
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  useEffect(() => {
    fetchFilterOptions();
  }, []);

  const fetchFilterOptions = async () => {
    try {
      // Fetch all classes with students in the department
      const classResponse = await apiFetch({
        url: `/api/faculty/hod/classes-with-students`,
        method: 'GET'
      });

      console.log('📚 Classes with students response:', classResponse.data);

      if (classResponse.data.status === 'success') {
        // The backend returns all unique classes that have students
        const uniqueClasses = classResponse.data.data || [];
        console.log('✅ Unique classes with students found:', uniqueClasses.length, uniqueClasses);
        setClasses(uniqueClasses);
      }

      // Fetch faculty list from the department
      const facultyResponse = await apiFetch({
        url: `/api/faculty/list?limit=100`,
        method: 'GET'
      });

      if (facultyResponse.data.status === 'success') {
        // Filter faculty by the HOD's department
        const departmentFaculty = facultyResponse.data.data.faculties.filter(
          f => f.department === user.department
        );
        console.log('👨‍🏫 Faculty in', user.department, ':', departmentFaculty.length);
        setFaculties(departmentFaculty);
      }
    } catch (error) {
      console.error('Error fetching filter options:', error);
    }
  };

  const handleGenerateReport = async () => {
    try {
      setLoading(true);
      
      const response = await apiFetch({
        url: '/api/faculty/hod/student-reports',
        method: 'POST',
        data: {
          classId: classId || undefined,
          facultyId: facultyId || undefined,
          fromDate: fromDate || undefined,
          toDate: toDate || undefined
        }
      });

      if (response.data.success) {
        setReports(response.data.data.reports);
        setSummary(response.data.data.summary);
        setGeneratedInfo(response.data.data);
        setCurrentPage(1);
      }
    } catch (error) {
      console.error('Error generating reports:', error);
      alert('Failed to generate reports. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSort = (field) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('desc');
    }
  };

  const handleViewDetails = (student) => {
    setSelectedStudent(student);
    setShowDetailModal(true);
  };

  const handleExportExcel = () => {
    if (reports.length === 0) {
      alert('No data to export');
      return;
    }

    const exportData = reports.map(r => ({
      'Roll Number': r.rollNumber,
      'Student Name': r.studentName,
      'Email': r.email,
      'Class': r.classId,
      'Total Sessions': r.totalSessions,
      'Attended': r.attendedSessions,
      'Absent': r.absentSessions,
      'Attendance %': r.attendancePercentage,
      'Category': r.category,
      'Faculty': r.facultyNames.join(', '),
      'Last Attendance': r.lastAttendanceDate
    }));

    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Student Reports');

    // Add header info
    const headerInfo = [
      [`Student Attendance Report - ${user.department} Department`],
      [`Generated by: ${generatedInfo?.generatedBy?.name || user.name}`],
      [`Generated at: ${new Date(generatedInfo?.generatedAt || new Date()).toLocaleString()}`],
      [`Date Range: ${fromDate || 'All'} to ${toDate || 'All'}`],
      [] // Empty row
    ];

    XLSX.utils.sheet_add_aoa(ws, headerInfo, { origin: 'A1' });
    
    const filename = `Student_Report_${user.department}_${new Date().toISOString().split('T')[0]}.xlsx`;
    XLSX.writeFile(wb, filename);
  };

  // Filter and sort reports
  const getFilteredAndSortedReports = () => {
    let filtered = [...reports];

    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(r => 
        r.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        r.rollNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        r.email.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let aVal = a[sortBy];
      let bVal = b[sortBy];

      if (typeof aVal === 'string') {
        aVal = aVal.toLowerCase();
        bVal = bVal.toLowerCase();
      }

      if (sortOrder === 'asc') {
        return aVal > bVal ? 1 : -1;
      } else {
        return aVal < bVal ? 1 : -1;
      }
    });

    return filtered;
  };

  const filteredReports = getFilteredAndSortedReports();
  const totalPages = Math.ceil(filteredReports.length / itemsPerPage);
  const paginatedReports = filteredReports.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const getCategoryColor = (category) => {
    switch (category) {
      case 'Excellent':
        return 'bg-green-100 text-green-800';
      case 'Good':
        return 'bg-yellow-100 text-yellow-800';
      case 'Poor':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'Excellent':
        return '🌟';
      case 'Good':
        return '👍';
      case 'Poor':
        return '⚠️';
      default:
        return '📊';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50">
      {/* Header */}
      <header className="bg-white shadow-lg border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-5">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => window.history.back()}
                className="w-10 h-10 bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg flex items-center justify-center hover:from-gray-200 hover:to-gray-300 transition-all"
              >
                ←
              </button>
              <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg">
                <span className="text-2xl">📊</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                  Student Reports
                </h1>
                <p className="text-gray-600 text-sm">{user?.department} Department</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filter Section */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-8 border border-gray-100">
          <div className="flex items-center mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-100 to-blue-200 rounded-lg flex items-center justify-center mr-3">
              <span className="text-xl">🔍</span>
            </div>
            <h2 className="text-xl font-bold text-gray-800">Filter Reports</h2>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                📚 Class
              </label>
              <select
                value={classId}
                onChange={(e) => setClassId(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All Classes ({classes.length})</option>
                {classes.map(cls => (
                  <option key={cls.classId} value={cls.classId}>
                    {cls.displayName}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                👨‍🏫 Faculty
              </label>
              <select
                value={facultyId}
                onChange={(e) => setFacultyId(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All Faculty ({faculties.length})</option>
                {faculties.map(fac => (
                  <option key={fac._id} value={fac.userId || fac._id}>
                    {fac.name} - {fac.position}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                From Date
              </label>
              <input
                type="date"
                value={fromDate}
                onChange={(e) => setFromDate(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                To Date
              </label>
              <input
                type="date"
                value={toDate}
                onChange={(e) => setToDate(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <div className="flex flex-wrap gap-4">
            <button
              onClick={handleGenerateReport}
              disabled={loading}
              className="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? '⏳ Generating...' : '📊 Generate Report'}
            </button>

            {reports.length > 0 && (
              <button
                onClick={handleExportExcel}
                className="bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
              >
                📥 Export to Excel
              </button>
            )}
          </div>
        </div>

        {/* Summary Cards */}
        {summary && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl shadow-xl p-6">
              <div className="text-white text-opacity-90 text-sm font-medium mb-1">Total Students</div>
              <div className="text-4xl font-bold text-white">{summary.totalStudents}</div>
            </div>

            <div className="bg-gradient-to-br from-green-500 to-green-600 rounded-2xl shadow-xl p-6">
              <div className="text-white text-opacity-90 text-sm font-medium mb-1">Excellent (≥90%)</div>
              <div className="text-4xl font-bold text-white">{summary.excellentCount}</div>
            </div>

            <div className="bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-2xl shadow-xl p-6">
              <div className="text-white text-opacity-90 text-sm font-medium mb-1">Good (75-89%)</div>
              <div className="text-4xl font-bold text-white">{summary.goodCount}</div>
            </div>

            <div className="bg-gradient-to-br from-red-500 to-red-600 rounded-2xl shadow-xl p-6">
              <div className="text-white text-opacity-90 text-sm font-medium mb-1">Poor (&lt;75%)</div>
              <div className="text-4xl font-bold text-white">{summary.poorCount}</div>
            </div>
          </div>
        )}

        {/* Reports Table */}
        {reports.length > 0 && (
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
            {/* Search and controls */}
            <div className="p-6 border-b border-gray-200">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex-1 max-w-md">
                  <input
                    type="text"
                    placeholder="Search by name, roll number, or email..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div className="text-sm text-gray-600">
                  Showing {filteredReports.length} of {reports.length} students
                </div>
              </div>
            </div>

            {/* Table */}
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                      onClick={() => handleSort('rollNumber')}
                    >
                      Roll Number {sortBy === 'rollNumber' && (sortOrder === 'asc' ? '↑' : '↓')}
                    </th>
                    <th
                      className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                      onClick={() => handleSort('studentName')}
                    >
                      Student Name {sortBy === 'studentName' && (sortOrder === 'asc' ? '↑' : '↓')}
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Class
                    </th>
                    <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Sessions
                    </th>
                    <th
                      className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                      onClick={() => handleSort('attendancePercentage')}
                    >
                      Attendance % {sortBy === 'attendancePercentage' && (sortOrder === 'asc' ? '↑' : '↓')}
                    </th>
                    <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Category
                    </th>
                    <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {paginatedReports.map((student, index) => (
                    <tr key={student.studentId} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {student.rollNumber}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{student.studentName}</div>
                        <div className="text-sm text-gray-500">{student.email}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                        {student.classId}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <div className="text-sm font-medium text-gray-900">{student.totalSessions}</div>
                        <div className="text-xs text-gray-500">
                          {student.attendedSessions}P / {student.absentSessions}A
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="text-lg font-bold" style={{
                          color: student.attendancePercentage >= 90 ? '#10b981' :
                                 student.attendancePercentage >= 75 ? '#f59e0b' : '#ef4444'
                        }}>
                          {student.attendancePercentage}%
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getCategoryColor(student.category)}`}>
                          {getCategoryIcon(student.category)} {student.category}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center text-sm">
                        <button
                          onClick={() => handleViewDetails(student)}
                          className="text-blue-600 hover:text-blue-800 font-medium"
                        >
                          View Details
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="px-6 py-4 border-t border-gray-200 flex items-center justify-between">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Previous
                </button>
                <span className="text-sm text-gray-600">
                  Page {currentPage} of {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Next
                </button>
              </div>
            )}
          </div>
        )}

        {/* Empty State */}
        {!loading && reports.length === 0 && (
          <div className="bg-white rounded-2xl shadow-lg p-12 text-center border border-gray-100">
            <div className="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-4xl">📊</span>
            </div>
            <h3 className="text-xl font-bold text-gray-800 mb-2">No Reports Generated Yet</h3>
            <p className="text-gray-600 mb-6">
              Select your filters above and click "Generate Report" to view student attendance data.
            </p>
          </div>
        )}
      </main>

      {/* Student Detail Modal */}
      {showDetailModal && selectedStudent && (
        <StudentDetailModal
          studentId={selectedStudent.studentId}
          onClose={() => {
            setShowDetailModal(false);
            setSelectedStudent(null);
          }}
        />
      )}
    </div>
  );
};

export default StudentReportsPage;

